# quero saber se as outras variáveis consegue explicar a Fraude.
# o sinal ~ significa relação, ou seja, quero saber se as variáveis (Idade, Gastos, Canal) tem relação para explicar
# o evento de interesse. o evento de interesse é sempre o 1. Fraude nesse caso.
count(Idade)
# binomial é uma distribuição de probabilidade discreta 0 ou 1.
# Função glm é uma função que está dentro do pacote glm2 e vai criar o modelo
# a variavel Fraude é minha variavel de estudo (0= Não Fraudou e 1= Fraude)
# quero saber se as outras variáveis consegue explicar a Fraude.
# o sinal ~ significa relação, ou seja, quero saber se as variáveis (Idade, Gastos, Canal) tem relação para explicar
# o evento de interesse. o evento de interesse é sempre o 1. Fraude nesse caso.
summary(Idade)
# binomial é uma distribuição de probabilidade discreta 0 ou 1.
# Função glm é uma função que está dentro do pacote glm2 e vai criar o modelo
# a variavel Fraude é minha variavel de estudo (0= Não Fraudou e 1= Fraude)
# quero saber se as outras variáveis consegue explicar a Fraude.
# o sinal ~ significa relação, ou seja, quero saber se as variáveis (Idade, Gastos, Canal) tem relação para explicar
# o evento de interesse. o evento de interesse é sempre o 1. Fraude nesse caso.
table(Idade)
# binomial é uma distribuição de probabilidade discreta 0 ou 1.
# Função glm é uma função que está dentro do pacote glm2 e vai criar o modelo
# a variavel Fraude é minha variavel de estudo (0= Não Fraudou e 1= Fraude)
# quero saber se as outras variáveis consegue explicar a Fraude.
# o sinal ~ significa relação, ou seja, quero saber se as variáveis (Idade, Gastos, Canal) tem relação para explicar
# o evento de interesse. o evento de interesse é sempre o 1. Fraude nesse caso.
view(Idade)
# binomial é uma distribuição de probabilidade discreta 0 ou 1.
# Função glm é uma função que está dentro do pacote glm2 e vai criar o modelo
# a variavel Fraude é minha variavel de estudo (0= Não Fraudou e 1= Fraude)
# quero saber se as outras variáveis consegue explicar a Fraude.
# o sinal ~ significa relação, ou seja, quero saber se as variáveis (Idade, Gastos, Canal) tem relação para explicar
# o evento de interesse. o evento de interesse é sempre o 1. Fraude nesse caso.
View(Idade)
Logistica <-glm(Fraude$Fraude ~ Idade + Gastos + Canal, family = binomial)
Fraude <- read_excel("./Fraude.xlsx")
View(Fraude)
attach(Fraude)
names(Fraude)
table(Fraude)
grafico_pie <- table(Fraude$Fraude)
grafico_pie <-as.data.frame(grafico_pie)
grafico_pie
grafico_pie2 <- plot_ly(grafico_pie,
labels = ~Var1,
values = ~Freq,
type = 'pie')%>%
layout(title = "Gráficos Fraudes - BI")
grafico_pie2
Logistica <-glm(Fraude$Fraude ~ Idade + Gastos + Canal, family = binomial)
Logistica <-glm(Fraude$Fraude ~ ., Idade + Gastos + Canal, family = binomial)
Logistica <-glm(Fraude$Fraude ~ Idade + Gastos + Canal, family = binomial)
library(readxl)
Consolidado <- read_excel("Consolidado.xlsx")
View(Consolidado)
attach(Consolidado)
install.packages("neuralnet")
library(neuralnet)
net <-neuralnet(default1~salario +
ValorEmprestimo+
QtdaParcelas+ comprometimento_renda1+TempodeResidencia+
TempodeServico
, data=Consolidado, hidden=10)
net
plot(net)
Logistica <-glm(Fraude$Fraude ~ Idade + Gastos + Canal, family = binomial)
Logistica <-glm(Fraude$Fraude ~ Fraude$Idade + Gastos + Canal, family = binomial)
Logistica
summary(Logistica)
probabilidade <-predict(Logistica, Fraude, type = "response")
probabilidade <-predict(Logistica, Fraude, type = "response")
Logistica <-glm(Fraude$Fraude ~ Idade + Gastos + Canal, family = binomial)
Fraude <- read_excel("./Fraude.xlsx")
View(Fraude)
attach(Fraude)
names(Fraude)
Logistica <-glm(Fraude$Fraude11 ~ Idade + Gastos + Canal, family = binomial)
install.packages("readxl")
install.packages("readxl")
library(readxl)
library(plotly)
library(glm2)
Fraude <- read_excel("./Fraude.xlsx")
View(Fraude)
attach(Fraude)
names(Fraude)
Logistica <-glm(Fraude$Fraude11 ~ Idade + Gastos + Canal, family = binomial)
Logistica
probabilidade <-predict(Logistica, Fraude, type = "response")
Fraude$probabilidade <-probabilidade # colocando a probabilidade no arquivo.
predito <- ifelse(probabilidade >= 0.5,1,0)
Fraude$predito <- predito # colocando a classificação no arquivo não Fraude "0" ou Fraude "1".
Fraude
table(Fraude$Fraude,predito) # tabela cruzada, serve para saber quantos acertos e erros.
classificacao_geral <-((124+4)/(124+6+55+4))*100 # essa classificação geral. mede o quanto o modelo acerta no geral
table(Fraude$Fraude11,predito) # tabela cruzada, serve para saber quantos acertos e erros.
classificacao_geral <-((124+4)/(124+6+55+4))*100 # essa classificação geral. mede o quanto o modelo acerta no geral
classificacao_geral
## igual a conta acima, mas pela matriz
classificacao_geral1 <-table(Fraude$Fraude11,predito)
assertividade <-(classificacao_geral1[1]+classificacao_geral1[4])/sum(classificacao_geral1)
assertividade
Novos_Dados_Fraude <- read_excel("Novos Dados Fraude.xlsx")
View(Novos_Dados_Fraude)
Novos_Dados_Fraude$probabilidade <-probabilidade # colocando a probabilidade no arquivo.
predito <- ifelse(probabilidade >= 0.5,1,0)
table(Novos_Dados_Fraude$predito)
predito <- ifelse(probabilidade >= 0.5,1,0)
Novos_Dados_Fraude$predito <- predito
table(Novos_Dados_Fraude$predito)
View(Novos_Dados_Fraude)
names(Novos_Dados_Fraude)
library(readxl)
net
net <-neuralnet(default1~salario +
ValorEmprestimo+
QtdaParcelas+ comprometimento_renda1+TempodeResidencia+
TempodeServico
, data=Consolidado, hidden=10)
library(readxl)
Consolidado <- read_excel("Consolidado.xlsx")
View(Consolidado)
attach(Consolidado)
install.packages("neuralnet")
install.packages("neuralnet")
library(neuralnet)
net <-neuralnet(default1~salario +
ValorEmprestimo+
QtdaParcelas+ comprometimento_renda1+TempodeResidencia+
TempodeServico
, data=Consolidado, hidden=10)
net
plot(net)
library(readxl)
Cadastral <- read_excel("Cadastral")
Cadastral <- read_excel("Cadastral")
save.image("C:/Users/logonrmlocal/Desktop/fiap-mba-big-data-data-science/Linguagem de Programação Estatística/Aula 5/.RData")
Cadastral <- read_excel("Cadastral")
library(readxl)
Cadastral <- read_excel("Cadastral")
library(readxl)
Cadastral <- read_excel("Cadastral")
Cadastral <- read_excel("Cadastral.xlsx")
View(Cadastral)
# 1
table(Sexo)
attach(Cadastral)
# 1
table(Sexo)
# 2
Cadastral <- order(Cadastral(ID))
# 2
Cadastral <- Cadastral[order(ID)]
Cadastral
# 2
Cadastral <- Cadastral[order(ID)]
# 2
Cadastral <- Cadastral[order(Cadastral$ID),]
# 2
Cadastral <- Cadastral[order(ID),]
Cadastral
# 2
Cadastral <- Cadastral[order(ID),]
Cadastral
# 2
Cadastral <- Cadastral[order(Cadastral$ID),]
Cadastral
# 3
A <- unique(Cadastral)
A
# 4
table(Sexo)
# 3
A <- Cadastral[duplicated(Cadastral$ID), fromLast = TRUE]
# 3
A <- Cadastral[duplicated(Cadastral$ID), fromLast = FALSE,]
# 3
A <- Cadastral[duplicated(Cadastral$ID, fromLast = FALSE),]
A
# 4
table(Sexo)
# 5
A$DataAtual <- Sys.Date()
A
View(A)
A
# 6
is.numeric(salario)
# 7
summary(salario)
# 7
min(salario)
max(salario)
# 5
data_atual <- Sys.Date()
A$DataAtual <- data_atual
A
# 6
is.numeric(A$salario)
# 7
min(A$salario)
max(A$salario)
# 4
table(A$Sexo)
# 8
faixa_salario <- factor(A$salario, levels = c(1574, 3000, 5000, 7000), labels = c(1574, 3000, 5000, 7000), right = TRUE)
# 8
faixa_salario <- factor(A$salario, levels = c(1574, 3000, 5000, 7000), labels = c(1574, 3000, 5000, 7000))
faixa_salario
# 8
faixa_salario <- cut(A$salario, levels = c(1574, 3000, 5000, 7000), labels = c(1574, 3000, 5000, 7000), right = TRUE)
# 8
faixa_salario <- cut(A$salario, breaks = c(1574, 3000, 5000, 7000), labels = c(1574, 3000, 5000, 7000), right = TRUE)
# 8
faixa_salario <- cut(A$salario, breaks = c(1574, 3000, 5000, 7000), labels = c('1574 a 3000', '3000 a 5000', '5000 a 7000'), right = TRUE)
faixa_salario
# 8) Crie uma variável faixa de salario com as seguintes quebras:
#    1574, 3000, 5000, 7000, 13500  com as classes fechadas nas esquerda.
#    Right = T. E coloque essa variável no arquivo.
A$FaixaSalario <- cut(A$salario, breaks = c(1574, 3000, 5000, 7000), labels = c('1574 a 3000', '3000 a 5000', '5000 a 7000'), right = TRUE)
A
A
min(A$salario)
max(A$salario)
View(A)
# 8) Crie uma variável faixa de salario com as seguintes quebras:
#    1574, 3000, 5000, 7000, 13500  com as classes fechadas nas esquerda.
#    Right = T. E coloque essa variável no arquivo.
A$FaixaSalario <- cut(A$salario,
breaks = c(1574, 3000, 5000, 7000, 13500),
labels = c('1574 a 3000', '3000 a 5000', '5000 a 7000', '7000 a 13500'), right = TRUE)
A
View(A)
# 8) Crie uma variável faixa de salario com as seguintes quebras:
#    1574, 3000, 5000, 7000, 13500  com as classes fechadas nas esquerda.
#    Right = T. E coloque essa variável no arquivo.
A$FaixaSalario <- cut(A$salario,
breaks = c(1574, 3000, 5000, 7000, 13500),
labels = c('1574 a 3000', '3001 a 5000', '5001 a 7000', '7001 a 13500'), right = TRUE)
A
# 9) Crie um visualizador/ matriz usando a função View(A).
View(A)
# Abre o Arquivo Transacional
Transacional <- read_excel("Transacional")
# Abre o Arquivo Transacional
Transacional <- read_excel("Transacional.xlsx")
View(Transacional)
attach(Transacional)
# Abre o Arquivo Cadastral
Cadastral <- read_excel("Cadastral.xlsx")
# 1) Tire uma tabela de frequência usando a função table na variável Sexo.
#    Quantos homens e quantas mulheres têm no arquivo?
table(Cadastral$Sexo)
# 2) Ordenar a variável ID
Cadastral <- Cadastral[order(Cadastral$ID),]
Cadastral
View(B)
# 10) Atribua o arquivo Transacional ao objeto B.
#     E crie um visualizador/ matriz usando a função View(B).
B <- Transacional
View(B)
# 10) Atribua o arquivo Transacional ao objeto B.
#     E crie um visualizador/ matriz usando a função View(B).
B <- read_excel("Transacional.xlsx")
View(B)
# 11) Crie um objeto chamado consolidado e faça uma união dos arquivos A e B
#     através do Left join. Usando a função do R.
left <- merge(A, B, by="ID", all.x=TRUE)
left
CLS
clear
# 11) Crie um objeto chamado consolidado e faça uma união dos arquivos A e B
#     através do Left join. Usando a função do R.
left <- merge(A, B, by="ID", all.x=TRUE)
left
# 11) Crie um objeto chamado consolidado e faça uma união dos arquivos A e B
#     através do Left join. Usando a função do R.
AB <- merge(A, B, by="ID", all.x=TRUE)
AB
# 12) Crie uma variável comprometimento de renda usando as variáveis ValorEmprestimo e Salario.
#     Para isso utilize a expressão. (ValorEmprestimo / salario). Quantas variáveis ficaram no arquivo?
AB$ComprometimentoRenda <- AB$Salario / AB$ValorEmprestimo
View(AB)
# 12) Crie uma variável comprometimento de renda usando as variáveis ValorEmprestimo e Salario.
#     Para isso utilize a expressão. (ValorEmprestimo / salario). Quantas variáveis ficaram no arquivo?
AB$ComprometimentoRenda <- AB$salario / AB$ValorEmprestimo
AB
# 12) Crie uma variável comprometimento de renda usando as variáveis ValorEmprestimo e Salario.
#     Para isso utilize a expressão. (ValorEmprestimo / salario). Quantas variáveis ficaram no arquivo?
AB$ComprometimentoRenda <- AB$ValorEmprestimo / AB$salario
AB
dim(AB)
# Quantas variáveis ficaram no arquivo?
dim(AB)[1]
# Quantas variáveis ficaram no arquivo?
dim(AB)[2]
# Quantas variáveis ficaram no arquivo?
dim(AB)[2]
# 13) Tire uma frequência separadamente das variáveis Sexo e default.
#     Para isso utilize a função Table. Quantos Homens , Mulheres, Adimplente e Inadimplente possui.
#     Os valores precisam ser mostrados separadamente.
table(AB$sexo)
# 13) Tire uma frequência separadamente das variáveis Sexo e default.
#     Para isso utilize a função Table. Quantos Homens , Mulheres, Adimplente e Inadimplente possui.
#     Os valores precisam ser mostrados separadamente.
table(AB$sexo)
# 13) Tire uma frequência separadamente das variáveis Sexo e default.
#     Para isso utilize a função Table. Quantos Homens , Mulheres, Adimplente e Inadimplente possui.
#     Os valores precisam ser mostrados separadamente.
table(AB$Sexo)
# 13) Tire uma frequência separadamente das variáveis Sexo e default.
#     Para isso utilize a função Table. Quantos Homens , Mulheres, Adimplente e Inadimplente possui.
#     Os valores precisam ser mostrados separadamente.
table(AB$Sexo, AB$default)
# 14) Faça uma estatística Bivariada utilizando a função CrossTable ente Sexo e default.
#     Quem tem o maior percentual de inadimplência Homens ou Mulheres. E qual é esse valor?
CrossTable(AB$Sexo, AB$default)
# 14) Faça uma estatística Bivariada utilizando a função CrossTable ente Sexo e default.
#     Quem tem o maior percentual de inadimplência Homens ou Mulheres. E qual é esse valor?
library(gmodels)
# 14) Faça uma estatística Bivariada utilizando a função CrossTable ente Sexo e default.
#     Quem tem o maior percentual de inadimplência Homens ou Mulheres. E qual é esse valor?
install.packages("gmodels")
library(gmodels)
CrossTable(AB$Sexo, AB$default)
# 6) Verifique se a variável salario é numérica?
is.numeric(A$salario)
# 15) Faça os gráficos de histograma e Boxplot da variável comprometimento de renda.
#     Essas variáveis se parece com uma distribuição normal?
head(AB$ComprometimentoRenda)
# 15) Faça os gráficos de histograma e Boxplot da variável comprometimento de renda.
#     Essas variáveis se parece com uma distribuição normal?
boxplot(AB$ComprometimentoRenda)
# 15) Faça os gráficos de histograma e Boxplot da variável comprometimento de renda.
#     Essas variáveis se parece com uma distribuição normal?
boxplot(AB$ComprometimentoRenda)
# 15) Faça os gráficos de histograma e Boxplot da variável comprometimento de renda.
#     Essas variáveis se parece com uma distribuição normal?
plot.ts(AB$ComprometimentoRenda)
# 15) Faça os gráficos de histograma e Boxplot da variável comprometimento de renda.
#     Essas variáveis se parece com uma distribuição normal?
install.packages("ggplot2")
library(ggplot2)
boxplot(AB$ComprometimentoRenda)
barplot(prop.table(table(AB$ComprometimentoRenda))*100,
col=c("blue", "red"),
title("Frequencia", xlab="Comprometimento de Renda", ylab="%"))
barplot(prop.table(table(AB$ComprometimentoRenda))*100,
col=c("blue", "red"),
title("Frequencia", xlab="ComprometimentoRenda", ylab="%"))
barplot(prop.table(table(AB$ComprometimentoRenda))*100,
title("Frequencia", xlab="ComprometimentoRenda", ylab="%"))
barplot
boxplot(AB$ComprometimentoRenda)
boxplot(AB$ComprometimentoRenda)
summary(AB)
# 16) Crie um novo objeto chamado comprometimento de renda1 e substitui todos os valores
#     maiores que 0.5 por 0.5 da variável comprometimento de renda.
#     Para tal operação utilize a função replace. Verifique através do mínimo e máximo se
#     a variável comprometimento de renda1 está dentro dos limites, ou seja, se tem valores
#     inferiores ou igual a 0.5. Coloque esse resultado no arquivo consolidado.
AB$ComprometimentoRenda1 <- replace(AB$ComprometimentoRenda, AB$ComprometimentoRenda > 0.5, 0.5)
AB
min(AB$ComprometimentoRenda1)
max(AB$ComprometimentoRenda1)
summary(AB$ComprometimentoRenda1)
# Sim, os valores estão dentro dos limites
View(AB)
# 13) Tire uma frequência separadamente das variáveis Sexo e default.
#     Para isso utilize a função Table. Quantos Homens , Mulheres, Adimplente e Inadimplente possui.
#     Os valores precisam ser mostrados separadamente.
table(AB$Sexo, AB$default)
table(AB$Sexo, AB$default)
# 13) Tire uma frequência separadamente das variáveis Sexo e default.
#     Para isso utilize a função Table. Quantos Homens, Mulheres, Adimplente e Inadimplente possui.
#     Os valores precisam ser mostrados separadamente.
table(AB$Sexo)
table(AB$default)
# 17) Faça novamente os gráficos histograma e Boxplot da variável comprometimento de renda1
#     e verifique se ainda possui outliers?
boxplot(AB$ComprometimentoRenda1)
# 18) Imprima o gráfico das redes neurais
install.packages("neuralnet")
install.packages("neuralnet")
library(neuralnet)
net <-neuralnet(default1 ~ salario + ValorEmprestimo + QtdaParcelas +
ComprometimentoRenda1 + TempodeResidencia +
TempodeServico
, data=AB, hidden=10)
net <-neuralnet(default1 ~ salario + ValorEmprestimo + QtdaParcelas +
ComprometimentoRenda1 + TempodeResidencia +
TempodeServiço
, data=AB, hidden=10)
net
plot(net)
library(readxl)
# Abre o Arquivo Cadastral
Cadastral <- read_excel("Cadastral.xlsx")
# 1) Tire uma tabela de frequência usando a função table na variável Sexo.
#    Quantos homens e quantas mulheres têm no arquivo?
table(Cadastral$Sexo)
# 2) Ordenar a variável ID
Cadastral <- Cadastral[order(Cadastral$ID),]
Cadastral
# 3) Remova os ID duplicados. Coloque esse arquivo dentro de um objeto chamado A.
A <- Cadastral[duplicated(Cadastral$ID, fromLast = FALSE),]
A
# 4) Já no objeto A. Tire uma tabela de frequência usando a função table na variável Sexo.
#    Quantos homens e quantas mulheres têm no arquivo?
table(A$Sexo)
# 5) Crie uma variável data atual e acrescenta essa variável ao objeto/ arquivo A.
data_atual <- Sys.Date()
A$DataAtual <- data_atual
A
# 6) Verifique se a variável salario é numérica?
is.numeric(A$salario)
# 7) Mostre o mínimo e o máximo da variável salario.
min(A$salario)
max(A$salario)
# 8) Crie uma variável faixa de salario com as seguintes quebras:
#    1574, 3000, 5000, 7000, 13500  com as classes fechadas nas esquerda.
#    Right = T. E coloque essa variável no arquivo.
A$FaixaSalario <- cut(A$salario,
breaks = c(1574, 3000, 5000, 7000, 13500),
labels = c('1574 a 3000', '3001 a 5000', '5001 a 7000', '7001 a 13500'), right = TRUE)
A
# 9) Crie um visualizador/ matriz usando a função View(A).
View(A)
# 10) Atribua o arquivo Transacional ao objeto B.
#     E crie um visualizador/ matriz usando a função View(B).
B <- read_excel("Transacional.xlsx")
View(B)
# 11) Crie um objeto chamado consolidado e faça uma união dos arquivos A e B
#     através do Left join. Usando a função do R.
AB <- merge(A, B, by="ID", all.x=TRUE)
AB
# 12) Crie uma variável comprometimento de renda usando as variáveis ValorEmprestimo e Salario.
#     Para isso utilize a expressão. (ValorEmprestimo / salario).
AB$ComprometimentoRenda <- AB$ValorEmprestimo / AB$salario
AB
# Quantas variáveis ficaram no arquivo?
dim(AB)[2]
# 13) Tire uma frequência separadamente das variáveis Sexo e default.
#     Para isso utilize a função Table. Quantos Homens, Mulheres, Adimplente e Inadimplente possui.
#     Os valores precisam ser mostrados separadamente.
table(AB$Sexo)
table(AB$default)
# 14) Faça uma estatística Bivariada utilizando a função CrossTable ente Sexo e default.
#     Quem tem o maior percentual de inadimplência Homens ou Mulheres. E qual é esse valor?
install.packages("gmodels")
install.packages("gmodels")
library(gmodels)
CrossTable(AB$Sexo, AB$default)
# 15) Faça os gráficos de histograma e Boxplot da variável comprometimento de renda.
#     Essas variáveis se parece com uma distribuição normal?
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
boxplot(AB$ComprometimentoRenda)
boxplot(AB$ComprometimentoRenda)
hist(AB$ComprometimentoRenda)
# 16) Crie um novo objeto chamado comprometimento de renda1 e substitui todos os valores
#     maiores que 0.5 por 0.5 da variável comprometimento de renda.
#     Para tal operação utilize a função replace. Verifique através do mínimo e máximo se
#     a variável comprometimento de renda1 está dentro dos limites, ou seja, se tem valores
#     inferiores ou igual a 0.5. Coloque esse resultado no arquivo consolidado.
AB$ComprometimentoRenda1 <- replace(AB$ComprometimentoRenda, AB$ComprometimentoRenda > 0.5, 0.5)
hist(AB$ComprometimentoRenda)
# 16) Crie um novo objeto chamado comprometimento de renda1 e substitui todos os valores
#     maiores que 0.5 por 0.5 da variável comprometimento de renda.
#     Para tal operação utilize a função replace. Verifique através do mínimo e máximo se
#     a variável comprometimento de renda1 está dentro dos limites, ou seja, se tem valores
#     inferiores ou igual a 0.5. Coloque esse resultado no arquivo consolidado.
AB$ComprometimentoRenda1 <- replace(AB$ComprometimentoRenda, AB$ComprometimentoRenda > 0.5, 0.5)
# 16) Crie um novo objeto chamado comprometimento de renda1 e substitui todos os valores
#     maiores que 0.5 por 0.5 da variável comprometimento de renda.
#     Para tal operação utilize a função replace. Verifique através do mínimo e máximo se
#     a variável comprometimento de renda1 está dentro dos limites, ou seja, se tem valores
#     inferiores ou igual a 0.5. Coloque esse resultado no arquivo consolidado.
AB$ComprometimentoRenda1 <- replace(AB$ComprometimentoRenda, AB$ComprometimentoRenda > 0.5, 0.5)
summary(AB$ComprometimentoRenda1)
# Sim, os valores estão dentro dos limites
View(AB)
# 17) Faça novamente os gráficos histograma e Boxplot da variável comprometimento de renda1
#     e verifique se ainda possui outliers?
boxplot(AB$ComprometimentoRenda1)
# 18) Imprima o gráfico das redes neurais
install.packages("neuralnet")
install.packages("neuralnet")
# 17) Faça novamente os gráficos histograma e Boxplot da variável comprometimento de renda1
#     e verifique se ainda possui outliers?
boxplot(AB$ComprometimentoRenda1)
hist(AB$ComprometimentoRenda1)
# Não pussui mais outliners
# 18) Imprima o gráfico das redes neurais
install.packages("neuralnet")
install.packages("neuralnet")
library(neuralnet)
net <-neuralnet(default1 ~ salario + ValorEmprestimo + QtdaParcelas +
ComprometimentoRenda1 + TempodeResidencia +
TempodeServiço
, data=AB, hidden=10)
net
plot(net)
plot(net)
# 18) Imprima o gráfico das redes neurais
install.packages("neuralnet")
library(neuralnet)
install.packages("neuralnet")
net <-neuralnet(default1 ~ salario + ValorEmprestimo + QtdaParcelas +
ComprometimentoRenda1 + TempodeResidencia +
TempodeServiço
, data=AB, hidden=10)
net
