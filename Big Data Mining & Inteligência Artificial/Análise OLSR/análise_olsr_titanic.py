# -*- coding: utf-8 -*-
"""AnÃ¡lise OLSR - Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I3ESBDglv06eidteDwSS1uxsONzVCm2V
"""

import pandas as pd
import numpy as np
import matplotlib as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('titanic.csv')
df.head()

df.describe()

df.info()

df['Survived'].value_counts()

df['Pclass'].value_counts(sort=False)

pclass_survived = pd.crosstab(df['Pclass'], df['Survived'])
pclass_survived.apply(lambda x: x/x.sum()*100, axis=1)

pclass_survived.plot(kind='bar', stacked=True, color=['red', 'green'])

df['Age'].hist()

df.boxplot('Age')

df['Siblings/Spouses Aboard'].value_counts(sort=False)

sibsp_survived = pd.crosstab(df['Siblings/Spouses Aboard'], df['Survived'])
sibsp_survived.apply(lambda x: x/x.sum()*100, axis=1)

df['Parents/Children Aboard'].value_counts(sort=False)

parch_survived = pd.crosstab(df['Parents/Children Aboard'], df['Survived'])
parch_survived.apply(lambda x: x/x.sum()*100, axis=1)

df['Family'] = df['Siblings/Spouses Aboard'] + df['Parents/Children Aboard']
df['Family'].value_counts(sort=False)

family_survived = pd.crosstab(df['Family'], df['Survived'])
family_survived.apply(lambda x: x/x.sum()*100, axis=1)

df.loc[df['Family'] > 0, 'Family'] = 1

family_survived = pd.crosstab(df['Family'], df['Survived'])
family_survived.apply(lambda x: x/x.sum()*100, axis=1)

df['Fare'].hist()

df.boxplot('Fare')

df['Sex Category'] = df['Sex']
df['Sex Category'].replace(['female', 'male'], [0,1], inplace=True)
df['Age Category'] = pd.cut(df['Age'], bins=[0, 16, 32, 48, 64, np.inf], labels=[0, 1, 2, 3, 4])
df['Fare Category'] = pd.cut(df['Fare'], bins=[-np.inf, 7.92, 14.45, 31.13, np.inf], labels=[0, 1, 2, 3])
df

data = df[['Pclass', 'Sex Category', 'Age Category', 'Fare Category', 'Family']]
data.columns = ['Pclass', 'Sex', 'Age', 'Fare', 'Family']
data

target = df['Survived']
target

train_data, test_data, train_target, test_target = train_test_split(data, target, test_size=0.2)
print(len(train_data))
print(len(test_data))

model = LogisticRegression().fit(train_data, train_target)
predicted = model.predict(test_data)

score = accuracy_score(test_target, predicted)

print('Score: ', score)

